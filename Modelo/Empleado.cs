//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modelo
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data.Entity;
    using System.Linq;
    using System.Web.ModelBinding;

    public partial class Empleado
    {
        [Required]
        public int Id { get; set; }
        [Required]
        [StringLength(50,ErrorMessage = "Sólo se permiten 50 caracteres como máximo")]
        public string Nombre { get; set; }
        [StringLength(50, ErrorMessage = "Sólo se permiten 50 caracteres como máximo")]
        public string Apellido_paterno { get; set; }
        [StringLength(50, ErrorMessage = "Sólo se permiten 50 caracteres como máximo")]
        public string Apellido_materno { get; set; }
        public Nullable<int> Edad { get; set; }

        // Funciones

        public List<Empleado> ListarEmpleados()
        {
            var empleados = new List<Empleado>();

            using (var context = new CRUD_EmpleadoEntities())
            {
                empleados = context.Empleado.ToList();
            }

            return empleados;
        }


        public bool CrearEmpleado()
        {
            int cambios;

            using (var context = new CRUD_EmpleadoEntities())
            {
                context.Empleado.Add(this);

                cambios = context.SaveChanges();
            }

            return cambios > 0 ? true : false;
        }

        public bool ActualizarEmpleado()
        {
            int cambios;

            using (var context = new CRUD_EmpleadoEntities())
            {
                context.Entry(this).State = EntityState.Modified;

                cambios = context.SaveChanges();
            }

            return cambios > 0 ? true : false;
        }

        public Empleado SeleccionarEmpleado(int Id)
        {
            var empleado = new Empleado();

            using (var context = new CRUD_EmpleadoEntities())
            {
                empleado = context.Empleado.FirstOrDefault(x => x.Id == Id);
            }

            return empleado;
        }

        public bool EliminarEmpleado(int Id)
        {
            int cambios;
            var empleado = new Empleado();

            using (var context = new CRUD_EmpleadoEntities())
            {
                empleado = context.Empleado.FirstOrDefault(x => x.Id == Id);

                context.Empleado.Remove(empleado);
                
                cambios = context.SaveChanges();
            }
            
            return cambios > 0 ? true : false;
        }

    }
}
